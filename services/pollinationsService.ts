export const generateText = async (prompt: string): Promise<string> => {
  const encodedPrompt = encodeURIComponent(prompt);
  // The Pollinations AI API does not support direct browser requests (CORS).
  // A proxy is used to bypass this browser security restriction and ensure reliability.
  const targetUrl = `https://text.pollinations.ai/${encodedPrompt}`;
  const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(targetUrl)}`;

  try {
    // Make a single request to the proxy with a 15-second timeout.
    const proxyResponse = await fetch(proxyUrl, {
      signal: AbortSignal.timeout(15000) 
    });

    if (!proxyResponse.ok) {
        // This handles errors from the proxy service itself.
        return `Sorry, there was an issue connecting to the content proxy (Status: ${proxyResponse.status}).`;
    }

    const proxyData = await proxyResponse.json();
    const targetStatus = proxyData.status?.http_code;

    // Check if the request to the target AI service was successful.
    if (targetStatus >= 200 && targetStatus < 300) {
      const text = proxyData.contents;
      let aiText = '';
      try {
        const data = JSON.parse(text);
        aiText = data.text || 'Could not parse AI response.';
      } catch (e) {
        // Fallback if the response is not valid JSON, but just plain text
        aiText = text || 'Received an empty response from AI.';
      }
      // Remove known watermarks from the AI's response
      return aiText.replace(/---\s*Generated by Pollinations\.ai/gi, '').trim();
    }
    
    // Handle specific HTTP errors from the target AI service with user-friendly messages
    if (targetStatus === 429) {
      return "The AI service is currently busy due to high demand. Please wait a moment and try your request again.";
    } else if (targetStatus >= 500) {
      return "The AI service is currently experiencing technical difficulties (Server Error). Please try again later.";
    } else {
      // For other client errors (4xx) or unexpected statuses
      return `Sorry, an unexpected error occurred while contacting the AI service (Status: ${targetStatus}).`;
    }

  } catch (error: any) {
    console.error("Error fetching text from Pollinations AI:", error);
    if (error.name === 'TimeoutError') {
      return "The request to the AI service timed out. It may be overloaded. Please try again in a few moments.";
    }
    // This will catch network errors (e.g., DNS, no internet) and proxy failures.
    return "Sorry, I couldn't connect to the AI service. Please check your internet connection and try again.";
  }
};

export const generateImageUrl = (prompt: string, model: string = 'flux', aspectRatio: string = '1:1'): string => {
    const encodedPrompt = encodeURIComponent(prompt);
    // Using seed to get different images and as a cache buster
    const seed = Math.floor(Math.random() * 1000000); 

    let width = 1024;
    let height = 1024;

    switch (aspectRatio) {
        case '16:9':
            width = 1280;
            height = 720;
            break;
        case '9:16':
            width = 720;
            height = 1280;
            break;
        case '4:3':
            width = 1024;
            height = 768;
            break;
        case '3:4':
            width = 768;
            height = 1024;
            break;
        case '1:1':
        default:
            width = 1024;
            height = 1024;
            break;
    }

    // Request high-resolution images, use a better model, and attempt to remove watermarks.
    return `https://image.pollinations.ai/prompt/${encodedPrompt}?width=${width}&height=${height}&seed=${seed}&model=${model}&nofeed=true&nolove=true`;
};