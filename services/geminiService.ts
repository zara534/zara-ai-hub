import { GoogleGenAI, GenerateContentResponse } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const RETRIES = 3;
const INITIAL_RETRY_DELAY = 1000;

export const generateText = async (userInput: string, systemInstruction: string, image?: { mimeType: string; data: string }): Promise<string> => {
    let lastError: Error | null = null;
    
    for (let i = 0; i <= RETRIES; i++) {
        try {
            let contents: any = userInput;

            if (image) {
                const textPart = { text: userInput };
                const imagePart = {
                  inlineData: {
                    mimeType: image.mimeType,
                    data: image.data,
                  },
                };
                contents = { parts: [imagePart, textPart] };
            }
            
            const response: GenerateContentResponse = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: contents,
                config: {
                    systemInstruction: systemInstruction,
                },
            });

            const text = response.text;
            if (text) {
                // Remove potential watermarks that AI might add
                return text.replace(/(Generated by|Powered by|Created by).*$/gim, '').trim();
            }
            
            lastError = new Error('Received an empty response from Gemini.');

        } catch (error) {
            lastError = error instanceof Error ? error : new Error(String(error));
            if (i < RETRIES) {
                const delay = INITIAL_RETRY_DELAY * Math.pow(2, i);
                console.warn(`Attempt ${i + 1} with Gemini failed. Retrying in ${delay}ms...`, lastError.message);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }
    
    console.error("Error fetching text from Gemini after multiple retries:", lastError);
    
    // The Gemini SDK error for rate limiting usually includes '429'
    if (lastError && lastError.message.includes('429')) {
        return "The AI service is currently busy due to high demand. Please wait a moment and try your request again.";
    }

    return "Sorry, I couldn't generate a response. The AI service seems to be unavailable right now. Please try again later.";
};